
package com.syscho.objectmapper.model.ti;

import java.util.HashMap;
import java.util.Map;
import javax.annotation.processing.Generated;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;


/**
 * PartyRoleCode
 * <p>
 * 
 * 
 */
@Generated("jsonschema2pojo")
public enum PartyRoleCode {

    BREEDER("BREEDER"),
    CUTTER("CUTTER"),
    GROWER("GROWER"),
    MINCER("MINCER"),
    ACCEPTING_PARTY("ACCEPTING_PARTY"),
    BILL_OF_LADING_RECIPIENT("BILL_OF_LADING_RECIPIENT"),
    BILL_TO("BILL_TO"),
    BRAND_OWNER("BRAND_OWNER"),
    BROKER_AGENT("BROKER_AGENT"),
    BUYER("BUYER"),
    BUYERS_AGENT_REPRESENTATIVE("BUYERS_AGENT_REPRESENTATIVE"),
    CARRIER("CARRIER"),
    CENTRAL_PAYMENT_SERVICE("CENTRAL_PAYMENT_SERVICE"),
    CHECKING_PARTY("CHECKING_PARTY"),
    CHEQUE_ORDER("CHEQUE_ORDER"),
    CONSIGNEE("CONSIGNEE"),
    CONSOLIDATOR("CONSOLIDATOR"),
    CONSUMER("CONSUMER"),
    CORPORATE_IDENTITY("CORPORATE_IDENTITY"),
    CUSTOMS("CUSTOMS"),
    CUSTOMS_BROKER("CUSTOMS_BROKER"),
    DECLARANTS_AGENT_REPRESENTATIVE("DECLARANTS_AGENT_REPRESENTATIVE"),
    DELIVERY_PARTY("DELIVERY_PARTY"),
    DESIGNER("DESIGNER"),
    DESPATCH_PARTY("DESPATCH_PARTY"),
    DISTRIBUTOR("DISTRIBUTOR"),
    DOCK_DOOR("DOCK_DOOR"),
    EMPTY_EQUIPMENT_DESPATCH_PARTY("EMPTY_EQUIPMENT_DESPATCH_PARTY"),
    EMPTY_EQUIPMENT_RETURN_PARTY("EMPTY_EQUIPMENT_RETURN_PARTY"),
    EQUIPMENT_OWNER("EQUIPMENT_OWNER"),
    EXPORTER("EXPORTER"),
    FACTOR("FACTOR"),
    FATTENER("FATTENER"),
    FREIGHT_FORWARDER("FREIGHT_FORWARDER"),
    GOODS_OWNER("GOODS_OWNER"),
    HEAD_OFFICE("HEAD_OFFICE"),
    IMPORTER("IMPORTER"),
    INFORMATION_PROVIDER("INFORMATION_PROVIDER"),
    INSURER("INSURER"),
    INTERMEDIARY_BANK_1("INTERMEDIARY_BANK_1"),
    INTERMEDIARY_BANK_2("INTERMEDIARY_BANK_2"),
    INVENTORY_CONTROLLER("INVENTORY_CONTROLLER"),
    INVENTORY_REPORTING_PARTY("INVENTORY_REPORTING_PARTY"),
    INVOICEE("INVOICEE"),
    ISSUER_OF_INVOICE("ISSUER_OF_INVOICE"),
    LOGISTICS_SERVICE_PROVIDER("LOGISTICS_SERVICE_PROVIDER"),
    MANUFACTURER_OF_GOODS("MANUFACTURER_OF_GOODS"),
    MANUFACTURING_PLANT("MANUFACTURING_PLANT"),
    MARK_FOR("MARK_FOR"),
    MESSAGE_FROM("MESSAGE_FROM"),
    MESSAGE_RECIPIENT("MESSAGE_RECIPIENT"),
    OPERATING_DIVISION("OPERATING_DIVISION"),
    OPERATOR("OPERATOR"),
    ORDERING_PARTY("ORDERING_PARTY"),
    OWNER_OF_EQUIPMENT("OWNER_OF_EQUIPMENT"),
    OWNER_OF_MEANS_OF_TRANSPORT("OWNER_OF_MEANS_OF_TRANSPORT"),
    PARTY_DECLARING_THE_VALUE_ADDED_TAX("PARTY_DECLARING_THE_VALUE_ADDED_TAX"),
    PARTY_FOR_WHOM_ITEM_IS_ULTIMATELY_INTENDED("PARTY_FOR_WHOM_ITEM_IS_ULTIMATELY_INTENDED"),
    PARTY_RECEIVING_PRIVATE_DATA("PARTY_RECEIVING_PRIVATE_DATA"),
    PARTY_RECOVERING_THE_VALUE_ADDED_TAX("PARTY_RECOVERING_THE_VALUE_ADDED_TAX"),
    PARTY_TO_RECEIVE_ALL_DOCUMENTS("PARTY_TO_RECEIVE_ALL_DOCUMENTS"),
    PARTY_TO_RECEIVE_COMMERCIAL_INVOICE("PARTY_TO_RECEIVE_COMMERCIAL_INVOICE"),
    PARTY_TO_RECEIVE_ELECTRONIC_MEMO_OF_INVOICE("PARTY_TO_RECEIVE_ELECTRONIC_MEMO_OF_INVOICE"),
    PARTY_TO_RECEIVE_FREIGHT_BILL("PARTY_TO_RECEIVE_FREIGHT_BILL"),
    PARTY_TO_RECEIVE_REFUND("PARTY_TO_RECEIVE_REFUND"),
    PAYEE("PAYEE"),
    PAYER("PAYER"),
    POINT_OF_SALE("POINT_OF_SALE"),
    PRICE_LOCATION_PARTY("PRICE_LOCATION_PARTY"),
    PROXY("PROXY"),
    PUBLIC_WAREHOUSE("PUBLIC_WAREHOUSE"),
    PURCHASE_ORDER_RECEIVER("PURCHASE_ORDER_RECEIVER"),
    REGISTERED_AGENT("REGISTERED_AGENT"),
    REMIT_TO("REMIT_TO"),
    RETURNABLE_ASSETT_SERVICE_CENTRE("RETURNABLE_ASSETT_SERVICE_CENTRE"),
    SELLER("SELLER"),
    SERVICE_PROVIDER("SERVICE_PROVIDER"),
    SHIP_FROM("SHIP_FROM"),
    SHIP_TO("SHIP_TO"),
    SLAUGHTERER("SLAUGHTERER"),
    STORE("STORE"),
    SUBSTITUTE_SUPPLIER("SUBSTITUTE_SUPPLIER"),
    SUPPLIER("SUPPLIER"),
    TRANSPORTATION_CARRIER("TRANSPORTATION_CARRIER"),
    VISITING_ADDRESS("VISITING_ADDRESS"),
    WAREHOUSE_AND_OR_DEPOT("WAREHOUSE_AND_OR_DEPOT"),
    WAREHOUSE_KEEPER("WAREHOUSE_KEEPER"),
    WHOLESALER("WHOLESALER"),
    CROSS_DOCK("CROSS_DOCK"),
    VIRTUAL("VIRTUAL"),
    CORPORATE_ENTITY("CORPORATE_ENTITY"),
    CUSTOMER("CUSTOMER"),
    PORT("PORT"),
    DISTRIBUTION_CENTER("DISTRIBUTION_CENTER"),
    IS_STORE_COMPARABLE("IS_STORE_COMPARABLE");
    private final String value;
    private final static Map<String, PartyRoleCode> CONSTANTS = new HashMap<String, PartyRoleCode>();

    static {
        for (PartyRoleCode c: values()) {
            CONSTANTS.put(c.value, c);
        }
    }

    PartyRoleCode(String value) {
        this.value = value;
    }

    @Override
    public String toString() {
        return this.value;
    }

    @JsonValue
    public String value() {
        return this.value;
    }

    @JsonCreator
    public static PartyRoleCode fromValue(String value) {
        PartyRoleCode constant = CONSTANTS.get(value);
        if (constant == null) {
            throw new IllegalArgumentException(value);
        } else {
            return constant;
        }
    }

}
